name: Build and Release APK

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4  # 使用 GitHub 官方的代码检出操作

      # 2. 为 gradlew 文件授予执行权限
      - name: Grant execution permission for gradlew
        run: chmod +x ./gradlew

      # 3. 设置 JDK 17 环境
      - name: Set up JDK 17
        uses: actions/setup-java@v4  # 使用 setup-java 动作
        with:
          distribution: 'zulu'  # 使用 Zulu OpenJDK 发行版
          java-version: '17'  # 指定 JDK 版本为 17

      # 4. 设置 Android SDK 环境
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3  # 使用 setup-android 动作
        with:
          cmdline-tools-version: "latest"
          # 设置tools版本为最新版 设置目标 Android API 级别为 最新版

      # 5. 配置缓存以加速 Gradle 构建
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 6. 校验 build.gradle.kts 文件语法
      - name: Validate Gradle files
        run: ./gradlew help  # 检查 Gradle 配置文件是否有效

      # 7. 校验依赖是否正确解析
      - name: Verify dependencies
        run: ./gradlew dependencies  # 列出所有依赖项以验证解析是否正确

      # 8. 运行代码静态检查
      - name: Run Lint checks
        run: ./gradlew lint  # 执行 Lint 检查，确保代码符合规范

      # 9. 运行单元测试
      - name: Run Unit tests
        run: ./gradlew test  # 执行单元测试，确保代码逻辑正确

      # 10. 配置 Keystore 文件
      - name: Set up keystore file
        run: |
          echo "$KEYSTORE_FILE" | base64 --decode > /tmp/keystore.jks  # 解码并写入 keystore 文件
        env:
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}  # 从 GitHub Secrets 获取 keystore 文件的 Base64 编码

      # 11. 构建 Release APK
      - name: Build Release APK
        run: ./gradlew assembleRelease --parallel -PKEYSTORE_FILE=/tmp/keystore.jks -PKEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} -PKEY_ALIAS=${{ secrets.KEY_ALIAS }} -PKEY_PASSWORD=${{ secrets.KEY_PASSWORD }}  # 构建 Release 版本的 APK，使用 Keystore 签名

      # 12. 创建 GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # 13. 上传 Release APK
      - name: Upload Release APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/release/app-release.apk
          asset_name: app-release.apk
          asset_content_type: application/vnd.android.package-archive

      # 14. 清理构建文件
      - name: Clean up build files
        run: ./gradlew clean  # 清理构建文件，释放存储空间
