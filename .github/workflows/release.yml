name: Build and Release APK

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 为 gradlew 文件授予执行权限
      - name: Grant execution permission for gradlew
        run: chmod +x ./gradlew

      # 3. 设置 JDK 17 环境
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      # 4. 设置 Android SDK 环境
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: "latest"

      # 5. 配置缓存以加速 Gradle 构建
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 6. 校验 build.gradle.kts 文件语法
      - name: Validate Gradle files
        run: ./gradlew help

      # 7. 校验依赖是否正确解析
      - name: Verify dependencies
        run: ./gradlew dependencies

      # 8. 运行代码静态检查
      - name: Run Lint checks
        run: ./gradlew lint

      # 9. 运行单元测试
      - name: Run Unit tests
        run: ./gradlew test

      # 10. 配置 Keystore 文件
      - name: Set up keystore file
        run: |
          echo "$KEYSTORE_FILE" | base64 --decode > /tmp/keystore.jks
        env:
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}

      # 11. 构建 Release APK
      - name: Build Release APK
        run: ./gradlew assembleRelease --parallel -PKEYSTORE_FILE=/tmp/keystore.jks -PKEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} -PKEY_ALIAS=${{ secrets.KEY_ALIAS }} -PKEY_PASSWORD=${{ secrets.KEY_PASSWORD }}

      # 7. 查找所有生成的 APK 文件
      - name: 查找所有生成的 APK 文件
        id: find-apks
        run: |
          APK_FILES=$(find "$PWD/app/build/outputs/apk/release" -name "*.apk" -type f | tr '\n' ' ')
          echo "Found APKs: $APK_FILES"
          if [ -z "$APK_FILES" ]; then
            echo "未找到 APK 文件！"
            exit 1
          fi
          echo "APK_FILES=$APK_FILES" >> $GITHUB_ENV
        shell: bash

      # 8. 验证并上传 APK 文件到 GitHub Release
      - name: 上传 APK 文件到 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.APK_FILES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 9. 清理构建文件
      - name: Clean up build files
        run: ./gradlew clean