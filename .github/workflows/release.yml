name: Build and Release APK

on:
  push:
    tags:
      - 'v*'  # 当推送以 'v' 开头的标签时触发，例如 v1.0.0

jobs:
  build:
    runs-on: ubuntu-latest  # 使用最新的 Ubuntu 虚拟机作为运行环境
    timeout-minutes: 120  # 设置最大运行时间为 120 分钟，防止长时间占用资源

    steps:
      # 1. 检出代码
      - name: 检出代码
        uses: actions/checkout@v4  # 使用官方动作检出代码仓库

      # 2. 为 gradlew 文件授予执行权限
      - name: 授予 gradlew 文件执行权限
        run: chmod +x ./gradlew  # 确保 Gradle 构建工具脚本具有执行权限

      # 3. 设置 JDK 17 环境
      - name: 配置 JDK 17 环境
        uses: actions/setup-java@v4  # 配置 Java 环境
        with:
          distribution: 'zulu'  # 使用 Azul Zulu 发行版的 OpenJDK
          java-version: '17'  # 指定 Java 版本为 17

      # 4. 配置 Android SDK
      - name: 配置 Android SDK 环境
        uses: android-actions/setup-android@v3  # 配置 Android 命令行工具
        with:
          cmdline-tools-version: 'latest'  # 安装最新版本的命令行工具

      # 5. 配置 Gradle 缓存
      - name: 配置 Gradle 缓存
        uses: actions/cache@v4  # 使用 GitHub Actions 的缓存功能加速构建
        with:
          path: |
            ~/.gradle/caches  # Gradle 缓存目录
            ~/.gradle/wrapper  # Gradle 包装器目录
            ~/.android         # Android SDK 缓存目录
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 6. 校验 Gradle 配置
      - name: 校验 Gradle 配置
        run: ./gradlew help  # 检查 Gradle 配置文件是否有效

      # 7. 构建 Release APK
      - name: 构建 Release APK
        run: |
          ./gradlew assembleRelease --parallel \
          -PKEYSTORE_FILE=/tmp/keystore.jks \
          -PKEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} \
          -PKEY_ALIAS=${{ secrets.KEY_ALIAS }} \
          -PKEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
        env:
          # 从 GitHub Secrets 中读取签名文件
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}

      # 8. 查找所有生成的 APK 文件
      - name: 查找所有生成的 APK 文件
        id: find-apks  # 设置步骤 ID，供后续步骤引用
        run: |
          # 在构建输出目录中查找所有 .apk 文件
          APK_FILES=$(find app/build/outputs/apk/ -name "*.apk" -type f)
          if [ -z "$APK_FILES" ]; then
            echo "未找到 APK 文件！"  # 如果未找到文件，退出并报错
            exit 1
          fi
          # 将找到的文件路径保存为输出变量
          echo "::set-output name=files::$(echo $APK_FILES | tr '\n' ' ')"

      # 9. 上传 APK 文件到 GitHub Release
      - name: 上传 APK 文件到 GitHub Release
        uses: softprops/action-gh-release@v2  # 使用 GitHub Actions 插件上传文件到 Release
        with:
          files: ${{ steps.find-apks.outputs.files }}  # 引用查找到的 APK 文件路径
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 使用 GitHub Token 进行身份验证

      # 10. 清理构建文件
      - name: 清理构建文件
        run: ./gradlew clean  # 清理构建文件，释放存储空间
