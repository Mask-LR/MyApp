name: Build APK

on:
  push:
    branches:
      - main  # 当代码推送到 main 分支时触发
  pull_request:
    branches:
      - main  # 当创建拉取请求时触发

jobs:
  build:
    name: Build Android App
    runs-on: ubuntu-latest

    env:
      OUTPUT_DEBUG: app/build/outputs/apk/debug/*.apk  # Debug APK 输出路径
      OUTPUT_RELEASE: app/build/outputs/apk/release/*.apk  # Release APK 输出路径

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 为 gradlew 授予执行权限
      - name: Grant execution permission for gradlew
        run: chmod +x ./gradlew

      # 3. 设置 JDK 环境
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # 4. 设置 Android SDK 环境
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 33

      # 5. 配置缓存以加速构建
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 6. 安装 Build Tools
      - name: Install build-tools
        run: sdkmanager "build-tools;33.0.2"

      # 7. 设置 Keystore 文件
      - name: Set up keystore file
        run: |
          echo "$KEYSTORE_FILE" | base64 --decode > /tmp/keystore.jks
        env:
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}

      # 8. 构建 Debug APK
      - name: Build Debug APK
        run: ./gradlew assembleDebug --stacktrace --info

      # 9. 构建 Release APK
      - name: Build Release APK
        run: ./gradlew assembleRelease -PKEYSTORE_FILE=/tmp/keystore.jks -PKEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} -PKEY_ALIAS=${{ secrets.KEY_ALIAS }} -PKEY_PASSWORD=${{ secrets.KEY_PASSWORD }}

      # 10. 创建 Release
      - name: Create Release
        uses: actions/create-release@v1  # 使用 GitHub 官方动作创建 Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub 提供的内置 Token
        with:
          tag_name: ${{ github.ref_name }}  # 使用分支名作为 Tag
          release_name: "Release ${{ github.ref_name }}"  # Release 的名称
          draft: false  # 是否是草稿状态
          prerelease: false  # 是否为预发布版本

      # 11. 上传 Debug APK 到 Release
      - name: Upload Debug APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # 使用上一步创建 Release 的上传 URL
          asset_path: ${{ env.OUTPUT_DEBUG }}  # Debug APK 文件路径
          asset_name: MyApp-Debug.apk  # Debug APK 文件名称
          asset_content_type: application/vnd.android.package-archive  # 文件类型

      # 12. 上传 Release APK 到 Release
      - name: Upload Release APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_RELEASE }}
          asset_name: MyApp-Release.apk
          asset_content_type: application/vnd.android.package-archive
