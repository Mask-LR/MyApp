name: Build APK

on:
  push:
    branches:
      - main  # 当代码推送到 main 分支时触发
  pull_request:  # 当创建拉取请求时也会触发
    branches:
      - main

jobs:
  build:
    name: Build Android App
    runs-on: ubuntu-latest  # 使用最新的 Ubuntu 系统运行环境

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v3  # 使用最新版本的 Checkout Action

      # 2. 授予 gradlew 执行权限
      - name: Grant execution permission for gradlew
        run: chmod +x ./gradlew  # 为 gradlew 脚本文件赋予执行权限

      # 3. 设置 JDK 环境
      - name: Set up JDK 17
        uses: actions/setup-java@v3  # 使用最新版本的 setup-java
        with:
          distribution: 'zulu'  # 使用 Zulu OpenJDK
          java-version: '17'  # 设置 JDK 版本为 17

      # 4. 设置 Android SDK 环境
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2  # 使用最新版本的 setup-android Action
        with:
          api-level: 33  # 设置目标 Android API 级别为 33（Android 13）

      # 5. 安装指定版本的 Build Tools
      - name: Install build-tools
        run: sdkmanager "build-tools;33.0.2"  # 安装指定版本的 build-tools

      # 6. 设置 Keystore 文件
      - name: Set up keystore file
        run: |
          echo "$KEYSTORE_FILE" | base64 --decode > /tmp/keystore.jks  # 从 secrets 中获取并解码 keystore 文件
        env:
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}  # 使用 GitHub Secrets 中的 KEYSTORE_FILE

      # 7. 构建 Debug APK
      - name: Build Debug APK
        run: ./gradlew assembleDebug  # 执行 gradlew 构建 Debug 版本的 APK

      # 8. 构建 Release APK
      - name: Build Release APK
        run: ./gradlew assembleRelease -PKEYSTORE_FILE=/tmp/keystore.jks -PKEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} -PKEY_ALIAS=${{ secrets.KEY_ALIAS }} -PKEY_PASSWORD=${{ secrets.KEY_PASSWORD }}  # 使用 Keystore 文件构建 Release 版本的 APK

      # 9. 上传 Debug APK
      - name: Upload Debug APK
        uses: actions/upload-artifact@v4  # 使用最新版本的 upload-artifact Action
        with:
          name: MyApp-Debug-APK  # 上传的文件名称
          path: app/build/outputs/apk/debug/*.apk  # Debug APK 的输出路径

      # 10. 上传 Release APK
      - name: Upload Release APK
        uses: actions/upload-artifact@v4  # 使用最新版本的 upload-artifact Action
        with:
          name: MyApp-Release-APK  # 上传的文件名称
          path: app/build/outputs/apk/release/*.apk  # Release APK 的输出路径
