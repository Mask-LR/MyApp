name: Build APK

on:
  push:
    branches:
      - main  # 当代码推送到 main 分支时触发工作流

jobs:
  build:
    name: Build Android App  # 工作名称
    runs-on: ubuntu-latest  # 使用最新的 Ubuntu 作为运行环境

    env:
      OUTPUT_DEBUG: app/build/outputs/apk/debug/*.apk  # Debug APK 输出路径
      OUTPUT_RELEASE: app/build/outputs/apk/release/**/*.apk  # Release APK 输出路径（递归捕获所有变体）

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4  # 使用 GitHub 官方的代码检出操作

      # 2. 为 gradlew 文件授予执行权限
      - name: Grant execution permission for gradlew
        run: chmod +x ./gradlew

      # 3. 设置 JDK 17 环境
      - name: Set up JDK 17
        uses: actions/setup-java@v4  # 使用 setup-java 动作
        with:
          distribution: 'zulu'  # 使用 Zulu OpenJDK 发行版
          java-version: '17'  # 指定 JDK 版本为 17

      # 4. 设置 Android SDK 环境
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3  # 使用 setup-android 动作
        with:
          packages: ''
        #  api-level: 35  # 设置目标 Android API 级别为 35（Android 15）

      # 5. 配置缓存以加速 Gradle 构建
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches  # 缓存路径
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}  # 缓存键
          restore-keys: |
            ${{ runner.os }}-gradle-  # 恢复键
      # 6. 校验 build.gradle.kts 文件语法
      - name: Validate Gradle files
        run: ./gradlew --no-daemon help  # 检查 Gradle 配置文件是否有效

      # 7. 校验依赖是否正确解析
      - name: Verify dependencies
        run: ./gradlew dependencies  # 列出所有依赖项以验证解析是否正确

      # 8. 运行代码静态检查
      - name: Run Lint checks
        run: ./gradlew lint  # 执行 Lint 检查，确保代码符合规范

      # 9. 运行单元测试
      - name: Run Unit tests
        run: ./gradlew test  # 执行单元测试，确保代码逻辑正确

      # 10. 安装指定版本的 Build Tools
      - name: Install build-tools
        run: sdkmanager "build-tools;34.0.0"  # 安装 Android Build Tools 34.0.0

      # 11. 配置 Keystore 文件
      - name: Set up keystore file
        run: |
          echo "$KEYSTORE_FILE" | base64 --decode > /tmp/keystore.jks  # 解码并写入 keystore 文件
        env:
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}  # 从 GitHub Secrets 获取 keystore 文件的 Base64 编码

      # 12. 构建 Debug APK
      - name: Build Debug APK
        run: ./gradlew assembleDebug --stacktrace --info  # 构建 Debug 版本的 APK，并启用详细日志和堆栈跟踪

      # 13. 构建 Release APK
      - name: Build Release APK
        run: ./gradlew assembleRelease -PKEYSTORE_FILE=/tmp/keystore.jks -PKEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} -PKEY_ALIAS=${{ secrets.KEY_ALIAS }} -PKEY_PASSWORD=${{ secrets.KEY_PASSWORD }}  # 构建 Release 版本的 APK，使用 Keystore 签名

      # 14. 上传 Debug APK
      - name: Upload Debug APK
        uses: actions/upload-artifact@v4  # 使用 GitHub Actions 上传构建产物
        with:
          name: MyApp-Debug-APK  # 上传的文件名称
          path: ${{ env.OUTPUT_DEBUG }}  # Debug APK 文件路径

      # 15. 上传 Release APK
      - name: Upload arm64-v8a APK
        uses: actions/upload-artifact@v4  # 使用 GitHub Actions 上传构建产物
        with:
          name: MyApp-Release-arm64-v8a-APK  # 上传的文件名称
          path: app/build/outputs/apk/release/app-arm64-v8a-release.apk

      - name: Upload armeabi-v7a APK
        uses: actions/upload-artifact@v4  # 使用 GitHub Actions 上传构建产物
        with:
          name: MyApp-Release-armeabi-v7a-APK  # 上传的文件名称
          path: app/build/outputs/apk/release/app-armeabi-v7a-release.apk

      - name: Upload x86 APK
        uses: actions/upload-artifact@v4  # 使用 GitHub Actions 上传构建产物
        with:
          name: MyApp-Release-x86-APK  # 上传的文件名称
          path: app/build/outputs/apk/release/app-x86-release.apk

      - name: Upload x86_64 APK
        uses: actions/upload-artifact@v4  # 使用 GitHub Actions 上传构建产物
        with:
          name: MyApp-Release-x86_64-APK  # 上传的文件名称
          path: app/build/outputs/apk/release/app-x86_64-release.apk

      - name: Upload universal APK
        uses: actions/upload-artifact@v4  # 使用 GitHub Actions 上传构建产物
        with:
          name: MyApp-Release-universal-APK  # 上传的文件名称
          path: app/build/outputs/apk/release/app-universal-release.apk